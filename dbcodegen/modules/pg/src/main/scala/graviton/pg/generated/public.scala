// Code generated by dbcodegen. DO NOT EDIT.
// Schema: public

package graviton.pg.generated
import com.augustnagro.magnum._
import graviton.db.{ _, given }
import zio.Chunk
import zio.json.ast.Json
import zio.schema.{ DeriveSchema, Schema }
import zio.schema.validation.Validation
@Table(PostgresDbType) final case class Objects(@Id @SqlName("locator") locator: String, @SqlName("bytes") bytes: Chunk[Byte]) derives DbCodec
object Objects {
  opaque type Id <: Tuple = Tuple1[String]
  type Tupled = locator: String
  object Id {
    def fromTuple(tuple: Tupled): Id = tuple.asInstanceOf[Id]
    def toTuple(id: Id): Tupled = id.asInstanceOf[Tupled]
    def apply(locator: String): Id = fromTuple(locator = locator)
  }
  given given_DbCodec_Id: DbCodec[Id] = scala.compiletime.summonInline[DbCodec[String]].biMap(value => Objects.Id.fromTuple(locator = value), id => Objects.Id.toTuple(id).locator)
  extension (id: Id) def locator: String = Objects.Id.toTuple(id).locator
  final case class Creator(locator: String, bytes: Chunk[Byte]) derives DbCodec
  val repo = Repo[Objects.Creator, Objects, Objects.Id]
}
@Table(PostgresDbType) final case class Kv(@Id @SqlName("key") key: String, @SqlName("value") value: Chunk[Byte]) derives DbCodec
object Kv {
  opaque type Id <: Tuple = Tuple1[String]
  type Tupled = key: String
  object Id {
    def fromTuple(tuple: Tupled): Id = tuple.asInstanceOf[Id]
    def toTuple(id: Id): Tupled = id.asInstanceOf[Tupled]
    def apply(key: String): Id = fromTuple(key = key)
  }
  given given_DbCodec_Id: DbCodec[Id] = scala.compiletime.summonInline[DbCodec[String]].biMap(value => Kv.Id.fromTuple(key = value), id => Kv.Id.toTuple(id).key)
  extension (id: Id) def key: String = Kv.Id.toTuple(id).key
  final case class Creator(key: String, value: Chunk[Byte]) derives DbCodec
  val repo = Repo[Kv.Creator, Kv, Kv.Id]
}
object Schemas {
  given objectsSchema: Schema[Objects] = DeriveSchema.gen[Objects]
  given objectsIdSchema: Schema[Objects.Id] = scala.compiletime.summonInline[Schema[String]].transform(value => Objects.Id.fromTuple(locator = value), id => Objects.Id.toTuple(id).locator)
  given kvSchema: Schema[Kv] = DeriveSchema.gen[Kv]
  given kvIdSchema: Schema[Kv.Id] = scala.compiletime.summonInline[Schema[String]].transform(value => Kv.Id.fromTuple(key = value), id => Kv.Id.toTuple(id).key)
}
