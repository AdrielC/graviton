// Code generated by dbcodegen. DO NOT EDIT.
// Schema: public

package graviton.pg.generated

import com.augustnagro.magnum.*
import graviton.db.{*, given}
import zio.Chunk
import zio.json.ast.Json
@Table(PostgresDbType)
final case class BuildInfo(
  @Id
  @SqlName("id")
  id: Long,
  @SqlName("app_name")
  appName: String,
  @SqlName("version")
  version: String,
  @SqlName("git_sha")
  gitSha: String,
  @SqlName("scala_version")
  scalaVersion: String,
  @SqlName("zio_version")
  zioVersion: String,
  @SqlName("built_at")
  builtAt: java.time.OffsetDateTime,
  @SqlName("launched_at")
  launchedAt: java.time.OffsetDateTime,
  @SqlName("is_current")
  isCurrent: Boolean
) derives DbCodec

object BuildInfo:
  opaque type Id <: Long = Long
  object Id:
    def apply(value: Long): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[Long]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: Long = id

  final case class Creator(
    id: Option[BuildInfo.Id] = None,
    appName: String,
    version: String,
    gitSha: String,
    scalaVersion: String,
    zioVersion: String,
    builtAt: java.time.OffsetDateTime,
    launchedAt: java.time.OffsetDateTime,
    isCurrent: Option[Boolean] = None
  ) derives DbCodec

  val repo = Repo[BuildInfo.Creator, BuildInfo, BuildInfo.Id]

@Table(PostgresDbType)
final case class HashAlgorithm(
  @Id
  @SqlName("id")
  id: Short,
  @SqlName("name")
  name: String,
  @SqlName("is_fips")
  isFips: Boolean
) derives DbCodec

object HashAlgorithm:
  opaque type Id <: Short = Short
  object Id:
    def apply(value: Short): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[Short]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: Short = id

  final case class Creator(
    id: Option[HashAlgorithm.Id] = None,
    name: String,
    isFips: Option[Boolean] = None
  ) derives DbCodec

  val repo = Repo[HashAlgorithm.Creator, HashAlgorithm, HashAlgorithm.Id]

@Table(PostgresDbType)
final case class Store(
  @Id
  @SqlName("key")
  key: StoreKey,
  @SqlName("impl_id")
  implId: String,
  @SqlName("build_fp")
  buildFp: Chunk[Byte],
  @SqlName("dv_schema_urn")
  dvSchemaUrn: String,
  @SqlName("dv_canonical_bin")
  dvCanonicalBin: Chunk[Byte],
  @SqlName("dv_json_preview")
  dvJsonPreview: Option[Json],
  @SqlName("status")
  status: StoreStatus,
  @SqlName("version")
  version: NonNegLong,
  @SqlName("created_at")
  createdAt: java.time.OffsetDateTime,
  @SqlName("updated_at")
  updatedAt: java.time.OffsetDateTime,
  @SqlName("dv_hash")
  dvHash: Option[Chunk[Byte]]
) derives DbCodec

object Store:
  opaque type Id <: StoreKey = StoreKey
  object Id:
    def apply(value: StoreKey): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[StoreKey]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: StoreKey = id

  final case class Creator(
    key: StoreKey,
    implId: String,
    buildFp: Chunk[Byte],
    dvSchemaUrn: String,
    dvCanonicalBin: Chunk[Byte],
    dvJsonPreview: Option[Json] = None,
    status: Option[StoreStatus] = None,
    version: Option[NonNegLong] = None,
    createdAt: Option[java.time.OffsetDateTime] = None,
    updatedAt: Option[java.time.OffsetDateTime] = None,
    dvHash: Option[Chunk[Byte]] = None
  ) derives DbCodec

  val repo = Repo[Store.Creator, Store, Store.Id]

@Table(PostgresDbType)
final case class Blob(
  @Id
  @SqlName("id")
  id: java.util.UUID,
  @SqlName("algo_id")
  algoId: HashAlgorithm.Id,
  @SqlName("hash")
  hash: HashBytes,
  @SqlName("size_bytes")
  sizeBytes: PosLong,
  @SqlName("media_type_hint")
  mediaTypeHint: Option[String],
  @SqlName("created_at")
  createdAt: java.time.OffsetDateTime
) derives DbCodec

object Blob:
  opaque type Id <: java.util.UUID = java.util.UUID
  object Id:
    def apply(value: java.util.UUID): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[java.util.UUID]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: java.util.UUID = id

  final case class Creator(
    id: Option[Blob.Id] = None,
    algoId: Short,
    hash: HashBytes,
    sizeBytes: PosLong,
    mediaTypeHint: Option[String] = None,
    createdAt: Option[java.time.OffsetDateTime] = None
  ) derives DbCodec

  val repo = Repo[Blob.Creator, Blob, Blob.Id]

@Table(PostgresDbType)
final case class Block(
  @Id
  @SqlName("algo_id")
  algoId: HashAlgorithm.Id,
  @Id
  @SqlName("hash")
  hash: HashBytes,
  @SqlName("size_bytes")
  sizeBytes: PosLong,
  @SqlName("created_at")
  createdAt: java.time.OffsetDateTime,
  @SqlName("inline_bytes")
  inlineBytes: Option[SmallBytes]
) derives DbCodec

object Block:
  opaque type Id <: (
    algoId: Short,
    hash: HashBytes
  ) = (
    algoId: Short,
    hash: HashBytes
  )
  object Id:
    def either(algoId: Short, hash: HashBytes): Either[String, Id] = Right((algoId = algoId, hash = hash))
    def apply(value: (
    algoId: Short,
    hash: HashBytes
  )): Id = value
    def apply(algoId: Short, hash: HashBytes): (
    algoId: Short,
    hash: HashBytes
  ) = (algoId = algoId, hash = hash)

  export Id.given
  extension (id: Id)
    def value: (
    algoId: Short,
    hash: HashBytes
  ) = id

  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[(Short, HashBytes)]].biMap(v => Id((algoId = v._1, hash = v._2)), i => (i.algoId, i.hash))


  final case class Creator(
    algoId: Short,
    hash: HashBytes,
    sizeBytes: PosLong,
    createdAt: Option[java.time.OffsetDateTime] = None,
    inlineBytes: Option[SmallBytes] = None
  ) derives DbCodec

  val repo = Repo[Block.Creator, Block, Block.Id]

@Table(PostgresDbType)
final case class MerkleSnapshot(
  @Id
  @SqlName("id")
  id: Long,
  @SqlName("query_fingerprint")
  queryFingerprint: Chunk[Byte],
  @SqlName("algo_id")
  algoId: HashAlgorithm.Id,
  @SqlName("root_hash")
  rootHash: HashBytes,
  @SqlName("at_time")
  atTime: java.time.OffsetDateTime,
  @SqlName("note")
  note: Option[String]
) derives DbCodec

object MerkleSnapshot:
  opaque type Id <: Long = Long
  object Id:
    def apply(value: Long): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[Long]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: Long = id

  final case class Creator(
    id: Option[MerkleSnapshot.Id] = None,
    queryFingerprint: Chunk[Byte],
    algoId: Short,
    rootHash: HashBytes,
    atTime: Option[java.time.OffsetDateTime] = None,
    note: Option[String] = None
  ) derives DbCodec

  val repo = Repo[MerkleSnapshot.Creator, MerkleSnapshot, MerkleSnapshot.Id]

@Table(PostgresDbType)
final case class ManifestEntry(
  @Id
  @SqlName("blob_id")
  blobId: Blob.Id,
  @Id
  @SqlName("seq")
  seq: Int,
  @SqlName("block_algo_id")
  blockAlgoId: Short,
  @SqlName("block_hash")
  blockHash: HashBytes,
  @SqlName("offset_bytes")
  offsetBytes: PosLong,
  @SqlName("size_bytes")
  sizeBytes: PosLong,
  @SqlName("span")
  span: Option[DbRange[Long]]
) derives DbCodec

object ManifestEntry:
  opaque type Id <: (
    blobId: java.util.UUID,
    seq: Int
  ) = (
    blobId: java.util.UUID,
    seq: Int
  )
  object Id:
    def either(blobId: java.util.UUID, seq: Int): Either[String, Id] = Right((blobId = blobId, seq = seq))
    def apply(value: (
    blobId: java.util.UUID,
    seq: Int
  )): Id = value
    def apply(blobId: java.util.UUID, seq: Int): (
    blobId: java.util.UUID,
    seq: Int
  ) = (blobId = blobId, seq = seq)

  export Id.given
  extension (id: Id)
    def value: (
    blobId: java.util.UUID,
    seq: Int
  ) = id

  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[(java.util.UUID, Int)]].biMap(v => Id((blobId = v._1, seq = v._2)), i => (i.blobId, i.seq))


  final case class Creator(
    blobId: java.util.UUID,
    seq: Int,
    blockAlgoId: Short,
    blockHash: HashBytes,
    offsetBytes: PosLong,
    sizeBytes: PosLong,
    span: Option[DbRange[Long]] = None
  ) derives DbCodec

  val repo = Repo[ManifestEntry.Creator, ManifestEntry, ManifestEntry.Id]

@Table(PostgresDbType)
final case class Replica(
  @Id
  @SqlName("id")
  id: Long,
  @SqlName("algo_id")
  algoId: Short,
  @SqlName("hash")
  hash: HashBytes,
  @SqlName("store_key")
  storeKey: Store.Id,
  @SqlName("sector")
  sector: Option[String],
  @SqlName("status")
  status: ReplicaStatus,
  @SqlName("size_bytes")
  sizeBytes: PosLong,
  @SqlName("etag")
  etag: Option[String],
  @SqlName("storage_class")
  storageClass: Option[String],
  @SqlName("first_seen_at")
  firstSeenAt: java.time.OffsetDateTime,
  @SqlName("last_verified_at")
  lastVerifiedAt: Option[java.time.OffsetDateTime]
) derives DbCodec

object Replica:
  opaque type Id <: Long = Long
  object Id:
    def apply(value: Long): Id = value
  given DbCodec[Id] = scala.compiletime.summonInline[DbCodec[Long]].biMap(value => Id(value), id => value(id))

  export Id.given
  extension (id: Id)
    def value: Long = id

  final case class Creator(
    id: Option[Replica.Id] = None,
    algoId: Short,
    hash: HashBytes,
    storeKey: StoreKey,
    sector: Option[String] = None,
    status: Option[ReplicaStatus] = None,
    sizeBytes: PosLong,
    etag: Option[String] = None,
    storageClass: Option[String] = None,
    firstSeenAt: Option[java.time.OffsetDateTime] = None,
    lastVerifiedAt: Option[java.time.OffsetDateTime] = None
  ) derives DbCodec

  val repo = Repo[Replica.Creator, Replica, Replica.Id]

@Table(PostgresDbType)
final case class VBlobManifest(
  @SqlName("id")
  id: Option[java.util.UUID],
  @SqlName("hash")
  hash: Option[HashBytes],
  @SqlName("size_bytes")
  sizeBytes: Option[PosLong],
  @SqlName("media_type_hint")
  mediaTypeHint: Option[String],
  @SqlName("created_at")
  createdAt: Option[java.time.OffsetDateTime],
  @SqlName("manifest")
  manifest: Option[Json]
) derives DbCodec

object VBlobManifest:
  type Id = Null

  val repo = ImmutableRepo[VBlobManifest, VBlobManifest.Id]

@Table(PostgresDbType)
final case class VBlockReplicaHealth(
  @SqlName("algo_id")
  algoId: Option[Short],
  @SqlName("hash")
  hash: Option[HashBytes],
  @SqlName("size_bytes")
  sizeBytes: Option[PosLong],
  @SqlName("created_at")
  createdAt: Option[java.time.OffsetDateTime],
  @SqlName("replica_count")
  replicaCount: Option[Long],
  @SqlName("active_count")
  activeCount: Option[Long],
  @SqlName("quarantined_count")
  quarantinedCount: Option[Long],
  @SqlName("deprecated_count")
  deprecatedCount: Option[Long],
  @SqlName("lost_count")
  lostCount: Option[Long],
  @SqlName("last_verified_at")
  lastVerifiedAt: Option[java.time.OffsetDateTime],
  @SqlName("has_active")
  hasActive: Option[Boolean],
  @SqlName("has_lost")
  hasLost: Option[Boolean]
) derives DbCodec

object VBlockReplicaHealth:
  type Id = Null

  val repo = ImmutableRepo[VBlockReplicaHealth, VBlockReplicaHealth.Id]

@Table(PostgresDbType)
final case class VStoreInventory(
  @SqlName("key")
  key: Option[StoreKey],
  @SqlName("impl_id")
  implId: Option[String],
  @SqlName("status")
  status: Option[StoreStatus],
  @SqlName("updated_at")
  updatedAt: Option[java.time.OffsetDateTime],
  @SqlName("total_replicas")
  totalReplicas: Option[Long],
  @SqlName("active_replicas")
  activeReplicas: Option[Long],
  @SqlName("quarantined_replicas")
  quarantinedReplicas: Option[Long],
  @SqlName("deprecated_replicas")
  deprecatedReplicas: Option[Long],
  @SqlName("lost_replicas")
  lostReplicas: Option[Long],
  @SqlName("first_replica_seen_at")
  firstReplicaSeenAt: Option[java.time.OffsetDateTime],
  @SqlName("last_replica_verified_at")
  lastReplicaVerifiedAt: Option[java.time.OffsetDateTime]
) derives DbCodec

object VStoreInventory:
  type Id = Null

  val repo = ImmutableRepo[VStoreInventory, VStoreInventory.Id]

